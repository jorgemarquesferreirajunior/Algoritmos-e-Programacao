#include <p18F4550.h>

// Configurações para gravação
#pragma config FOSC = HS
#pragma config WDT = OFF
#pragma config MCLRE = OFF
#pragma config LVP = OFF

#define RS      PORTEbits.RE2   // Via do LCD que sinaliza recepção de dados ou comando
#define ENABLE  PORTEbits.RE1   // Enable do LCD
#define LCD     PORTD           // Barramento de dados do LCD

unsigned short m = 0;
unsigned short c = 0;
unsigned short d = 0;
unsigned short u = 0;
unsigned short contador = 0;
unsigned short ciclos = 0;
unsigned short EstAntCont = 1;

// Protótipos das funções
void ConfiguraLCD8(unsigned char COMANDO);
void InicializaLCD8(void);
void EscreveLCD8(unsigned char DADO);
void EscreveLinhaLCD8(unsigned char LINHA, rom unsigned char *STR);
void Delay_ms(unsigned int);
void CalculaNumeros(unsigned int);

void main(void)
{

  //Inicialização
  PORTA = 0x00; PORTB = 0x00; PORTC = 0x00; PORTD = 0x00; PORTE = 0x00;
  LATA  = 0x00; LATB  = 0x00; LATC  = 0x00; LATD  = 0x00; LATE  = 0x00;
  TRISA = 0x01; TRISB = 0x00; TRISC = 0x01; TRISD = 0x00; TRISE = 0x00;
  ADCON1= 0x0F;

  /*/Inicialização do Timer0
  T1CON = 0x07;        	// 16 bits, fonte externa, prescaler (1:1) 00, oscilador interno off, modo asincrono, modo contador, contador habilitador
  PIR1bits.TMR1IF = 0;	 	// Limpa flag de overflow do Timer1
  TMR1H = 0xFF;
  TMR1L = 0x9C;          	// Carrega valores iniciais do contador (0x9B = 155)
   */
   
  T1CON = 0x07;        // Config. do Timer1: 8 bits, PRESCALER 1:1, clock externo assíncrono
  PIR1bits.TMR1IF = 0; // Limpa flag de overflow do Timer1
  TMR1H = 0xFF;	
  TMR1L = 0x9C;	 // Carrega valores iniciais do Timer1 (0xFD = 254)
   
  
   
  InicializaLCD8();
  ConfiguraLCD8(0x01);
  EscreveLCD8('I');
  EscreveLCD8('T');
  EscreveLCD8('E');
  EscreveLCD8('M');
  EscreveLCD8('.');
  EscreveLCD8('.');
  EscreveLCD8('.');
  EscreveLCD8('.');
  EscreveLCD8('.');
  EscreveLCD8('.');
  EscreveLCD8('.');
  EscreveLCD8('.');
  
  ConfiguraLCD8(0xC0);
  EscreveLCD8('C');
  EscreveLCD8('I');
  EscreveLCD8('C');
  EscreveLCD8('L');
  EscreveLCD8('O');
  EscreveLCD8('S');
  EscreveLCD8('.');
  EscreveLCD8('.');
  EscreveLCD8('.');
  EscreveLCD8('.');
  EscreveLCD8('.');
  EscreveLCD8('.');
   
  // Início do programa
  while(1)
  {
     
     if(PORTAbits.RA0 == 1 && !EstAntCont == 1){
	
	contador ++;
     }
    EstAntCont = PORTAbits.RA0;
     if(PORTBbits.RB0 = 1){
	contador = 0;
     }
    CalculaNumeros(contador);
    ConfiguraLCD8(0x8C);
    EscreveLCD8(0x30 + m);
    EscreveLCD8(0x30 + c);
    EscreveLCD8(0x30 + d);
    EscreveLCD8(0x30 + u);
    
    if(ciclos > 9999){ciclos = 0;}
    CalculaNumeros(ciclos);
     
    ConfiguraLCD8(0xCC);
    EscreveLCD8(0x30 + m);
    EscreveLCD8(0x30 + c);
    EscreveLCD8(0x30 + d);
    EscreveLCD8(0x30 + u);
    
    if(PIR1bits.TMR1IF == 1) // Verifica o overflow do Timer1
    {      
      PORTBbits.RB0 = 1;
      //Delay_ms(2000); 
       PIR1bits.TMR1IF = 0; // Limpa flag de overflow do Timer1
       TMR1H = 0xFF;	
       TMR1L = 0x9C;
       
       contador = 0;
       ciclos++;
       
       //PORTBbits.RB0 = 0;
       
       T0CON = 0x84;          // Config. do Timer0: ON, 16 bits, clock interno, PRESCALER ativo, 1:32
       INTCONbits.TMR0IF = 0; // Limpa flag de overflow do Timer0
       TMR0H = 0x0B;          // Carrega valores iniciais do contador (0x0B28 = 2.856)
       TMR0L = 0x28;
    }
	if(INTCONbits.TMR0IF == 1){
	    PORTBbits.RB0 = 0;
	   T0CON = 0x84;          // Config. do Timer0: ON, 16 bits, clock interno, PRESCALER ativo, 1:32
           INTCONbits.TMR0IF = 0; // Limpa flag de overflow do Timer0
           TMR0H = 0x0B;          // Carrega valores iniciais do contador (0x0B28 = 2.856)
           TMR0L = 0x28;
	}		
  }
}

// Rotina que envia um COMANDO para o LCD
void ConfiguraLCD8(unsigned char INST){
	RS = 0;             // seleciona o envio de uma instrução
	LCD = INST;         // carrega o barramento com a instrução desejada
	ENABLE = 1;         // habilita o display
	Delay100TCYx(2);    // espera 100us
	ENABLE = 0;         // desabilita o display
	Delay1KTCYx(10);    // espera 5ms
}

// Rotina para inicialização do Display de LCD (RW conectado em GND)
void InicializaLCD8(void){
	Delay1KTCYx(30);        // aguarda pelo menos 15ms
	ConfiguraLCD8(0x30);    // instrução de inicialização
	Delay1KTCYx(10);        // aguarda pelo menos 4.1ms
	ConfiguraLCD8(0x30);    // instrução de inicialização
	Delay100TCYx(2);        // aguarda pelo menos 100us
	ConfiguraLCD8(0x30);    // instrução de inicialização
	ConfiguraLCD8(0x38);    // define interface de 8 bits e display de 2 linhas
	ConfiguraLCD8(0x06);    // desloca cursor para direita sem deslocar a mensagem
	ConfiguraLCD8(0x0C);    // desliga cursor
	ConfiguraLCD8(0x01);    // limpa display
}

// Rotina que envia um DADO a ser escrito no LCD
void EscreveLCD8(unsigned char DADO){
	RS = 1;             // seleciona o envio de um caractere
	LCD = DADO;         // carrega o barramento com o caractere a ser exibido
	ENABLE = 1;         // habilita o display
	Delay100TCYx(2);    // espera 100us
	ENABLE = 0;         // desabilita o display
	Delay100TCYx(2);    // espera 100us
}

// Rotina que escreve uma linha completa no LCD
void EscreveLinhaLCD8(unsigned char LINHA, rom unsigned char *FRASE){
	if(LINHA == 1) ConfiguraLCD8(0x80);
	if(LINHA == 2) ConfiguraLCD8(0xC0);
	// Escreve todos os caracteres até encontrar o final do ponteiro
	while(*FRASE != '\0'){
		EscreveLCD8(*FRASE);
		++FRASE;
	}
}
void Delay_ms(unsigned int tempo){
    while(tempo > 0){
        Delay100TCYx(10);
        tempo--;
    }
}

void CalculaNumeros(unsigned int valor){
   if(valor < 10){
   m = 0;
   c = 0;
   d = 0;   
   u = valor;
   }
   else if(valor < 100){
   m = 0;
   c = 0;
   d = valor / 10;
   u = valor % 10;
   }
   else if(valor < 1000){
   m = 0;
   c = valor / 100;
   d  = (valor % 100) / 10;
   u = (valor % 100) % 10;
   }
   else{
   m = valor / 1000;
   c = (valor % 1000) / 100;
   d = ((valor % 1000) % 100) / 10;
   u = ((valor % 1000) % 100) % 10;
   }
}
